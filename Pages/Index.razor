@page "/"

@using blazorServerSK.Data
@inject SentimentAndThemeService SentimentAndTheme
@using MiniExcelLibs
@using System.IO
@using System.Linq
@using System

<PageTitle>File Upload App</PageTitle>

<h1>File Upload</h1>

<InputFile OnChange="@LoadFiles" multiple accept=".xls,.xlsx,.cvs" />
@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul>
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
} else if (sentimentAndThemeList.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Comment</th>
                <th>Sentiment</th>
                <th>Theme</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentimentAndTheme in sentimentAndThemeList)
            {
                <tr>
                    <td>@sentimentAndTheme.Id</td>
                    <td>@sentimentAndTheme.Comment</td>
                    <td>@sentimentAndTheme.Sentiment</td>
                    <td>@sentimentAndTheme.Theme</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private long maxFileSize = 10 * 1024 * 1024; // 10MB
    private int maxAllowedFiles = 3;
    private List<string> errors = new List<string>();
    List<SentimentAndTheme> sentimentAndThemeList = new List<SentimentAndTheme>();
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        
        try
        {
            errors.Clear();
            var files = e.GetMultipleFiles(maxAllowedFiles);
            if (files.Count > maxAllowedFiles)
            {
                errors.Add($"You can only upload {maxAllowedFiles} files at a time.");
                return;
            }
            foreach (var file in files)
            {
                if (file.Size > maxFileSize)
                {
                    errors.Add($"{file.Name} is too large, maximum size allowed is {maxFileSize} bytes.");
                }
                else
                {
                    string tempFilePath = "C:\\temp\\" + Guid.NewGuid().ToString() + ".xlsx";  
                    await using (var stream = file.OpenReadStream())
                    {
                        await using FileStream fs = new FileStream(tempFilePath, FileMode.Create);
                        await stream.CopyToAsync(fs);
                    }

                    var intBatchSize = 10;
                    var rows = MiniExcel.Query<SurveyFeedback>(tempFilePath).ToList();
                    var iterationCnt=0;
                    foreach (var row in rows)
                    {
                        var commentRows = rows.Skip(iterationCnt * intBatchSize).Take(intBatchSize).ToList();
                        var resultsSentimentList = await SentimentAndTheme.GetSentimentAsync(commentRows);
                        sentimentAndThemeList.AddRange(resultsSentimentList);
                        iterationCnt++;
                        
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }

    }

    public class SurveyFeedback
    {
        public int Id { get; set; }
        public string? Comments { get; set; }
    }

}
