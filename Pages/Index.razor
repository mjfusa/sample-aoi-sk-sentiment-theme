@page "/"

@using blazorServerSK.Data
@inject SentimentAndThemeService SentimentAndTheme
@inject IJSRuntime JS
@using MiniExcelLibs
@using System.IO
@using System.Linq
@using System

<PageTitle>Sentiment and Theme Analysis - Microsoft Semantic Kernel Sample</PageTitle>
<h1>Sentiment and Theme Analysis</h1>

<InputFile OnChange="@LoadFiles" accept=".xls,.xlsx,.cvs" class="btn btn-primary" />
<p>
</p>
<div style=' display: @(canSave ? "block" : "none")'>
    <p></p>
    <button @onclick="SaveResults" class="btn btn-primary" id="btnSaveResults">Save Results</button>


</div>
@if (status.Count > 0)
{
    <h2>Status</h2>
    <ul>
        @foreach (var stat in status)
        {
            <li>@stat</li>
        }
    </ul>
}
@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul>
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}
else if (sentimentAndThemeList.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Comment</th>
                <th>Sentiment</th>
                <th>Theme</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentimentAndTheme in sentimentAndThemeList)
            {
                <tr>
                    <td>@sentimentAndTheme.Id</td>
                    <td>@sentimentAndTheme.Comment</td>
                    <td>@sentimentAndTheme.Sentiment</td>
                    <td>@sentimentAndTheme.Theme</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private long maxFileSize = 10 * 1024 * 1024; // 10MB
    private int maxAllowedFiles = 3;
    private List<string> errors = new List<string>();
    private List<string> status = new List<string>();
    List<SentimentAndTheme> sentimentAndThemeList = new List<SentimentAndTheme>();

    private bool canSave { get; set; } = false;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            errors.Clear();
            sentimentAndThemeList.Clear();
            canSave = false;
            var files = e.GetMultipleFiles(maxAllowedFiles);
            if (files.Count > maxAllowedFiles)
            {
                errors.Add($"You can only upload {maxAllowedFiles} files at a time.");
                return;
            }
            foreach (var file in files)
            {
                if (file.Size > maxFileSize)
                {
                    errors.Add($"{file.Name} is too large, maximum size allowed is {maxFileSize} bytes.");
                }
                else
                {
                    string tempFilePath = "C:\\temp\\" + Guid.NewGuid().ToString() + ".xlsx";
                    await using (var stream = file.OpenReadStream())
                    {
                        await using FileStream fs = new FileStream(tempFilePath, FileMode.Create);
                        await stream.CopyToAsync(fs);
                    }

                    var intBatchSize = 50;
                    var rows = MiniExcel.Query<SurveyFeedback>(tempFilePath).ToList();
                    var iterationCnt = 0;
                    foreach (var row in rows)
                    {
                        var commentRows = rows.Skip(iterationCnt * intBatchSize).Take(intBatchSize).ToList();
                        if ((iterationCnt * intBatchSize) % intBatchSize == 0)
                        {
                            status.Clear();
                            var maxRecs = commentRows.Count < intBatchSize ? commentRows.Count : intBatchSize;
                            status.Add($"Processing records {iterationCnt * intBatchSize} to {(iterationCnt * intBatchSize) + maxRecs}...");
                            StateHasChanged();
                        }
                        if (commentRows.Count == 0)
                        {
                            break;
                        }
                        var resultsSentimentList = await SentimentAndTheme.GetSentimentAsync(commentRows);
                        sentimentAndThemeList.AddRange(resultsSentimentList);
                        StateHasChanged();
                        iterationCnt++;

                    }
                }
                status.Clear();
                status.Add($"File {file.Name} was processed successfully.");
                canSave = true;
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }

    }

    public class SurveyFeedback
    {
        public int Id { get; set; }
        public string? Comments { get; set; }
    }
    private void SaveResults()
    {
        try
        {
            var filePath = "C:\\temp\\" + Guid.NewGuid().ToString() + ".xlsx";
            var data = sentimentAndThemeList.Select(x => new { x.Id, x.Comment, x.Sentiment, x.Theme }).ToList();
            MiniExcel.SaveAs(filePath, data);
            status.Clear();
            status.Add($"Results saved to {filePath}");
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

}
